* get kswapd to run on the non-boot CPU [DONE]
* Do TLB shootdowns after swapping out pages [DONE]
* Try to come up with errors in userland code having to with memory region locking.
  For instance, malloc some memory, sleep so it's paged out, then try reading a file into
  it and see what happens. [DONE]
  Answer: copyinstr, uio, copyin/copyout behaves correctly after testing. tm_badfaultfunc
  causes a fault, which causes PTEs to be checked, and the memory to be swapped back in. I think
  that covers the cases, since we don't move pages around right now. If we do start doing that, then
  I'll add the memory pinning and unpinning calls.
* Idea: add a new syscall that pages out a region, to facilitate testing so we don't have to rely
  solely on sleep() and page aging. [DONE]
* Get pipes working (pipe(2)), with blocking and non-blocking reads and buffering [DONE, mostly. Needs testing]
* Get shared memory regions working
* Get mmap working
* Implement O_CLOEXEC on file descriptors [DONE]
* Implement vfork
* Implement copy on write for forked processes
* Implement clone() for user-level threads
* Implement signals (hard!)
* allow lseeking for sparse files (files with holes in them, see lseek(2)
* Implement fcntl to set fd flags [DONE] (for O_CLOEXEC)
* get atexit functions working [DONE]
* get exec() to parse shebang lines if present, and modify argv and parse options like Linux does
* get daemonized processes working from kernel shell for testing signals [DONE, mostly]
* Implement process scheduling
* Implement CPU thread migration
* Add process accounting info, like CPU time, wall time, sleep time, etc.
